/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ([
/* 0 */,
/* 1 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Bool = void 0;
const replace_1 = __webpack_require__(2);
class Bool {
    constructor(name, content = false) {
        window.variables.push({
            name: name,
            content: content,
            resolved: [],
        });
        this.name = name;
        this.content = content;
        replace_1.replace(this.name, this.content);
    }
    set(content) {
        this.content = content;
        replace_1.replace(this.name, this.content);
    }
    swap() {
        this.content = !this.content;
        replace_1.replace(this.name, this.content);
    }
}
exports.Bool = Bool;


/***/ }),
/* 2 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.replace = void 0;
const regex_1 = __webpack_require__(3);
/*
the main utility of replace.js, this replaces {{ name }} to the given
content , it also do a great job by resolving all condition's  and
functions. PLease change this code very carefully, a missing symbol can
cause big error cause it the heart of the program.
*/
const replace = (name, content) => {
    let html = window.initialHTML;
    window.variables.forEach((element, i) => {
        let newContent;
        if (element.name === name)
            newContent = content;
        else
            newContent = element.content;
        html = html.replaceAll(regex_1.keyWordRegex(element.name), newContent);
        window.variables[i].content = newContent;
        const funcs = window.initialHTML.match(regex_1.functionRegex(element.name));
        if (funcs != null) {
            funcs.forEach((func, i) => {
                let res;
                if (element.name === name) {
                    let onlyfunc = func.slice(2, func.length - 2);
                    // actually there is a problem in html, in html, sometimes ">" is written as "&gt;"
                    onlyfunc = onlyfunc.replaceAll("&gt;", ">");
                    res = eval(`const func=${onlyfunc};func(newContent);`);
                    element.resolved[i] = res;
                }
                else {
                    res = element.resolved[i];
                }
                html = html.replaceAll(func, res);
            });
        }
    });
    document.body.innerHTML = html;
};
exports.replace = replace;


/***/ }),
/* 3 */
/***/ ((__unused_webpack_module, exports) => {


/*
this is where all regular expressions are stored.
Please handle this regex carefully. a missing symbol
can cause a big errors. note "\\" is turned to "\"
means "\s" will be "\\s"
*/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.replaceAllRegex = exports.functionRegex = exports.keyWordRegex = void 0;
const keyWordRegex = (name) => {
    return new RegExp(`\\{\\{[\\s]*?${name}[\\s]*?\\}\\}`, "g");
};
exports.keyWordRegex = keyWordRegex;
const functionRegex = (name) => {
    return new RegExp(`\\{\\{[\\s\\n]*?\\(${name}\\)=(>|&gt)[\\w\\W\s]*?\\}\\}`, "g");
};
exports.functionRegex = functionRegex;
exports.replaceAllRegex = new RegExp("(\\{\\{[\\s\\n]*?(\\([\\w\\Ws]*?\\)=(>|&gt)[\\w\\Ws]*?|\\[[\\w\\W]\\])\\}\\}|\\{\\{[\\s]*?[\\w\\Ws]*?[\\s]*?\\}\\})", "g");


/***/ }),
/* 4 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Str = void 0;
const replace_1 = __webpack_require__(2);
class Str {
    constructor(name, content = "") {
        if (typeof content != "string") {
            throw new Error(`string is expected found ${typeof content}`);
        }
        window.variables.push({
            name: name,
            content: content,
            resolved: [],
        });
        this.name = name;
        this.content = content;
        replace_1.replace(this.name, this.content);
    }
    set(content) {
        this.content = content;
        replace_1.replace(this.name, this.content);
    }
    if(state, callback) {
        if (this.content === state) {
            if (typeof callback === "string") {
                this.set(callback);
            }
            else {
                callback();
            }
            this.ifResult = true;
            return true;
        }
        else {
            function elseif() { }
            this.ifResult = false;
            return false;
        }
    }
    else(callback) {
        if (this.ifResult) {
            return false;
        }
        if (typeof callback === "string") {
            this.set(callback);
        }
        else {
            callback();
        }
        return true;
    }
    elif(state, callback) {
        if (typeof callback != "string" && typeof callback != "function") {
            throw new Error(`string is expected found ${typeof callback}`);
        }
        if (this.ifResult) {
            return false;
        }
        if (this.content === state) {
            if (typeof callback === "string") {
                this.set(callback);
            }
            else {
                callback();
            }
            return true;
        }
        return false;
    }
    slice(start, end) {
        if (end)
            this.set(this.content.slice(start, end));
        else
            this.set(this.content.slice(start));
    }
    replace(keyword, content) {
        this.set(this.content.replace(keyword, content));
    }
    replaceAll(keyword, content) {
        this.set(this.content.replaceAll(keyword, content));
    }
}
exports.Str = Str;


/***/ }),
/* 5 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.init = void 0;
const regex_1 = __webpack_require__(3);
/*
replace all variable to empty string
*/
const init = () => {
    document.body.innerHTML = window.initialHTML.replaceAll(regex_1.replaceAllRegex, "");
};
exports.init = init;


/***/ }),
/* 6 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.multiReplace = void 0;
const regex_1 = __webpack_require__(3);
/*
this is utility is same as replace function, source code is
also same but with some small changes, it can now replace mutiple
variables, functions an conditions
*/
const multiReplace = (data) => {
    let html = window.initialHTML;
    window.variables.forEach((element, i) => {
        let newContent;
        if (data[element.name])
            newContent = data[element.name];
        else
            newContent = element.content;
        html = html.replaceAll(regex_1.keyWordRegex(element.name), newContent);
        window.variables[i].content = newContent;
        const funcs = window.initialHTML.match(regex_1.functionRegex(element.name));
        if (funcs != null) {
            funcs.forEach((func, i) => {
                let res;
                if (data[element.name]) {
                    let onlyfunc = func.slice(2, func.length - 2);
                    onlyfunc = onlyfunc.replace("&gt;", ">");
                    if (typeof newContent === "string") {
                        res = eval(`const func=${onlyfunc};func("${newContent}");`);
                    }
                    else {
                        res = eval(`const func=${onlyfunc};func(${newContent})`);
                    }
                    element.resolved[i] = res;
                }
                else {
                    res = element.resolved[i];
                }
                html = html.replaceAll(func, res);
            });
        }
    });
    document.body.innerHTML = html;
};
exports.multiReplace = multiReplace;


/***/ }),
/* 7 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Arr = void 0;
const replace_1 = __webpack_require__(2);
class Arr {
    constructor(name, content = []) {
        if (typeof content != "object") {
            throw new Error(`array is expected found ${typeof content}`);
        }
        window.variables.push({
            name: name,
            content: content,
            resolved: [],
        });
        this.name = name;
        this.content = content;
        replace_1.replace(this.name, this.content);
    }
    set(content) {
        this.content = content;
        replace_1.replace(this.name, this.content);
    }
    push(content) {
        this.content.push(content);
        replace_1.replace(this.name, this.content);
    }
    pop() {
        this.content.pop();
        replace_1.replace(this.name, this.content);
    }
    unshift(content) {
        this.content.unshift(content);
        replace_1.replace(this.name, this.content);
    }
    splice(start, end) {
        this.content.splice(start, end);
        replace_1.replace(this.name, this.content);
    }
    index(i) {
        return this.content[i];
    }
    edit(i, content) {
        this.content[i] = content;
        replace_1.replace(this.name, this.content);
    }
    length() {
        return this.content.length;
    }
}
exports.Arr = Arr;


/***/ })
/******/ 	]);
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be isolated against other modules in the chunk.
(() => {
var exports = __webpack_exports__;

Object.defineProperty(exports, "__esModule", ({ value: true }));
const array_1 = __webpack_require__(7);
const boolean_1 = __webpack_require__(1);
const string_1 = __webpack_require__(4);
const init_1 = __webpack_require__(5);
const multiReplace_1 = __webpack_require__(6);
const replace_1 = __webpack_require__(2);
/*
all function that are meant to be available globally and to the user
*/
window.initialHTML = document.body.innerHTML;
init_1.init();
window.variables = [];
window.Str = string_1.Str;
window.replace = replace_1.replace;
window.Bool = boolean_1.Bool;
window.Arr = array_1.Arr;
window.multiReplace = multiReplace_1.multiReplace;

})();

/******/ })()
;